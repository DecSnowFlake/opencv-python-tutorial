#!/usr/bin/env python
# coding: utf-8

# # Graph cut

# ## 目标
# 
# 在本章，我们将要学习：
# - GraphCut 算法原理，使用GrabCut算法提取图像的前景
# - 创建一个交互式程序完成前景提取

# ## 原理

# - 用户输入一个矩形，矩形外面的所有区域肯定都是背景（所有的对象都要包含在矩形框内），矩形框内的东西是未知的，同样用户确定前景和背景的任何操作都不会被程序所改变。
# - 计算机会对我们的输入图像做一个初始化标记，它会标记前景和背景像素。
# - 使用一个高斯混合模型（GMM）对前景和背景建模
# - 根据我们的输入,GMM会学习并创建新的像素分布.对那些分类位置的像素(可能是前景也可能是背景),可以根据它们与已知分类(如背景)的像素的关系来进行分类(就像是在做聚类操作).
# - 这样就会根据像素的分布创建一幅图,图中的节点就是像素点.除了像素点之外,还有两个节点:Source_node 和 Sink_node.所有的前景像素都和Source_node相连,所有的背景像素都和Sink_node相连.
# - 将像素连接到Souece_node/Sink_node的边的权重由它们属于同一类的概率来决定.两个像素之间的权重由边的信息或者两个像素的相似性来决定.如果两个像素的颜色有很大的不同,那么它们之间的边的权重就会很小.
# - 使用mincut算法对上面得到的图进行分割,它会根据最低成本方程将图分为Source_node和Sink_node.成本方程就是被剪掉的所有边的权重之和.在裁剪之后
#     - 所有连接到Source_node的像素被认为是前景
#     - 所有链接到Sink_node的像素被认为是背景
# - 继续这个过程直到收敛

# ## 演示

# In[1]:


import numpy as np
from matplotlib import pyplot as plt


# In[2]:


import cv2


# In[3]:


get_ipython().run_line_magic('pinfo', 'cv2.grabCut')


# In[ ]:




